# Environment variables

# Only source this once
if [[ -z "$__HM_ZSH_SESS_VARS_SOURCED" ]]; then
  export __HM_ZSH_SESS_VARS_SOURCED=1
  
fi

function git-update {
  current_branch=`git rev-parse --abbrev-ref HEAD`
  echo "Updating branch $current_branch"
  git checkout main
  git fetch origin main
  git rebase origin/main
  git checkout $current_branch
  git rebase main
}

function fig() {
  git log --graph --color=always \
  --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
  --bind "ctrl-m:execute:
          (grep -o '[a-f0-9]\{7\}' | head -1 |
          xargs -I % sh -c 'git show --color=always %') << 'FZF-EOF'
          {}
  FZF-EOF"
}

function things_down {
  (cd $THINGS; git-update)
}

function things_up {
  (cd $THINGS; git add . && git commit -m "Things update `date`"; git push origin main)
}
alias tedit="things_down && vim $THINGS/TODO.md $THINGS/DONE_SELF.md $THINGS/DONE_WORK.md && things_up &"

function tokens {
  echo Pulling
  things_down
  echo Decrypting
  gpg --decrypt --output /tmp/fun_tokens $THINGS/fun_tokens
  vim /tmp/fun_tokens
  echo Encrypting
  gpg --symmetric --output $THINGS/fun_tokens /tmp/fun_tokens
  echo Uploading
  things_up &
  rm -f /tmp/fun_tokens &
}

function ccat {
  if [ ! -t 0 ];then
    file=/dev/stdin
  elif [ -f $1 ];then
    file=$1
  else
    echo "Usage: $0 code.c"
    echo "or e.g. head code.c|$0"
    exit 1
  fi

  pygmentize -f terminal -g $file
}

function geb {
  git checkout -b kyle/$1
}

# ripgrep->fzf->vim [QUERY]
# https://junegunn.github.io/fzf/tips/ripgrep-integration/
rfv() (
  RELOAD='reload:rg --column --color=always --smart-case {q} || :'
  OPENER='if [[ $FZF_SELECT_COUNT -eq 0 ]]; then
            if command -v code-insiders 2>&1 >/dev/null
            then
              code-insiders {1} +{2}
            else
              vim {1} +{2}     # No selection. Open the current line in Vim.
            fi
          else
            if command -v code-insiders 2>&1 >/dev/null
            then
              code-insiders {+f}
            else
              vim +cw -q {+f}  # Build quickfix list for the selected items.
            fi
          fi'
  fzf --disabled --ansi --multi \
      --bind "start:$RELOAD" --bind "change:$RELOAD" \
      --bind "enter:become:$OPENER" \
      --bind "ctrl-o:execute:$OPENER" \
      --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
      --delimiter : \
      --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
      --preview-window '~4,+{2}+4/3,<80(up)' \
      --query "$*"
)
zle -N rfv

if [ -v AWS_CREDENTIALS ]; then
  mkdir -p ~/.aws
  echo $AWS_CREDENTIALS > ~/.aws/credentials
fi
    
mkdir -p ~/.ssh
echo $SSH_KEY > ~/.ssh/kyle
echo $SSH_KEY_PUB > ~/.ssh/kyle.pub
chmod 644 ~/.ssh/kyle.pub && \
chmod 600 ~/.ssh/kyle

# Sometimes, it's just easier to have asdf around (e.g. installing elixir in docker on mac in a devcontainer on a turtle)
if test -d "$HOME/.asdf"; then
  echo "Sourcing asdf, since it's here"
  . "$HOME/.asdf/asdf.sh"
fi

# needed to be able to open files in VS Code's editor from the command line, especially tmux
# https://github.com/microsoft/vscode-remote-release/issues/6362#issuecomment-1047851356
export VSCODE_IPC_HOOK_CLI="$( \ls 2>/dev/null -1 -t /tmp/vscode-ipc-*.sock | head -n 1 )"

# Company things
export FAY_USER=krwenholz
if [ -e "$HOME/corporate_things.sh" ]; then
  source "$HOME/corporate_things.sh"
fi

PATH=$PATH:$HOME/includes/bin
RPROMPT=""

export PYTHONBREAKPOINT=IPython.embed

echo "
       ^...^
      / o,o \\
      |):::(|
    ====w=w===
    "

# Ensure that a non-login, non-interactive shell has a defined environment.
if [[ ( "$SHLVL" -eq 1 && ! -o LOGIN ) && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprofile"
fi

# For Granted
# https://docs.commonfate.io/granted/usage/assuming-roles
alias assume=". assume"
