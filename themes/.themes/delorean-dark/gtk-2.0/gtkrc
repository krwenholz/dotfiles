## GTK2 theme DeLorean_varNaM 0.050212
# Author : Joshua Brown-Williams ~ killhellokitty/jo-shva
# May 2, 2012
# Licence : GPL

# ===[ scroll bars ]===
#  bg[ACTIVE] is slider color
#  bg[NORMAL] is steppers color
#  base[NORMAL] is trough color

# ===[ check and radio buttons ]===
#  text[SELECTED] is the active bullet color
#  text[INSENSITIVE] is the inactive bullet color
#  base[PRELIGHT] is the unchecked base color
#  base[SELECTED] is the checked base color
#  base[ACTIVE] is the unchecked base color when pressed

# ===[ scales ]===
#  bg[NORMAL] is slider color
#  bg[PRELIGHT] is slider prelight color
#  bg[SELECTED] is slider's focus border color
#  base[SELECTED] is trough color

# ===[ progressbars ]===
#  bg[NORMAL] is trough color
#  bg[SELECTED] is fill color

gtk_color_scheme = "fg_color:#0e0e0e\nbg_color:#3e3e3e\nbase_color:#1d1d1d\ntext_color:#0f0b05\nselected_bg_color:#006AA8\nselected_fg_color:#FFFFFF\ntooltip_fg_color:#FFFFFF\ntooltip_bg_color:#212526\nlink_color:#006AA8"
gtk-icon-sizes = "panel-menu=24,24:panel=22,22:gtk-button=16,16:gtk-large-toolbar=22,22"

gtk-auto-mnemonics = 1

gtk-menu-popup-delay = 50

#include "murrine.rc"

style "theme-default" {

  GtkButton::default_border = { 0, 0, 0, 0 }
  GtkButton::child-displacement-x = 0
  GtkButton::child-displacement-y = 1
  GtkWidget::focus-padding = 0

  GtkRange::trough-border   = 0
  GtkRange::slider-width    = 13
  GtkRange::stepper_size    = 13
  GtkRange::stepper_spacing = 0

  GtkScrollbar::min_slider_length = 42
  GtkScrollbar::has-forward-stepper = 0
  GtkScrollbar::has-backward-stepper = 0
  GtkScrollbar::has-secondary-forward-stepper = 0
  GtkScrollbar::has-secondary-backward-stepper = 0

  GtkMenuBar::internal-padding  = 0
  GtkMenuBar::window-dragging = 1

  GtkTreeView::expander_size    = 13
  GtkExpander::expander_size    = 13

  GtkScale::slider-length = 12
  GtkScale::slider-width  = 12
  GtkScale::trough-border = 2


  GtkWidget::cursor-color = "#0094eb"
  GtkWidget::cursor-aspect-ratio = 0.1
  GtkWidget::secondary-cursor-color = "#dbdbdb"

  GtkWidget::link-color = @link_color
  GtkIMHtml::hyperlink-color = @link_color
  GtkHTML::link-color = @link_color

  WnckTasklist::fade-overlay-rect = 0
  WnckTasklist::fade-loop-time    = 5.0 # 5 seconds
  WnckTasklist::fade-opacity      = 0.5 # final opacity

  #makes menu only overlap border
  GtkMenu::horizontal-padding = 0

  #removes extra padding at top and bottom of menus.  Makes menuitem overlap border
  GtkMenu::vertical-padding = 0

  #set to the same as roundness, used for better hotspot selection of tabs
  GtkNotebook::tab-curvature = 2.5
  GtkNotebook::tab-overlap   = 3

  GtkMenuItem::arrow-spacing = 10
  #Spacing between edge with indicator and text
  GtkOptionMenu  ::indicator-size = {11, 5}
  #GtkOptionMenu  ::indicator-spacing = {6, 5, 4, 4}

  GtkCheckButton ::indicator-size    = 15
  GtkCheckButton ::indicator-spacing = 1
  GtkRadioButton ::indicator-size    = 15

  GtkPaned::handle-size = 8

  # A new color must be defined since affectation of mix or shade functions to GtkTreeView::odd_row_color raise this message :
  # Gtk-Message: (for origin information, set GTK_DEBUG): failed to retrieve property `GtkTreeView::odd-row-color' of type `GdkColor' from rc file value "((GString*) 0x9ccba00)" of type `GString'
  #color["odd_row_color"] = @base_color
  GtkTreeView::horizontal_separator = 2
  GtkTreeView::odd_row_color = shade(0.82, @base_color)
	GtkTreeView::even_row_color	= shade(0.8, @base_color)
  GtkScrolledWindow::scrollbar-spacing       = 0
  GtkScrolledWindow::scrollbars-within-bevel = 1
  GtkScrolledWindow::window-placement-set    = 0

  GtkStatusbar::shadow-type = 1 #Set to on because Ubuntu and derivitives force this to turn on.  I made 'statusbar-frame-fix' to graphically remove the statusbar shadow.

  # The following line hints to gecko (and possibly other appliations)
  # that the entry should be drawn transparently on the canvas.
  # Without this, gecko will fill in the background of the entry.
  GtkEntry::honors-transparent-bg-hint = 1
  GtkEntry::state-hint = 0
  #GtkEntry	:: inner-border			= { 2, 2, 1, 1 }
  GtkEntry::progress-border = { 2, 2, 2, 2 }

  GtkWidget::new-tooltip-style = 1
	GtkImage::x-ayatana-indicator-dynamic = 1
  
  xthickness = 1
  ythickness = 1

  fg[NORMAL]       	=  "#dbdbdb"
  fg[ACTIVE]       	=  "#ffffff" # inactive tab text
  fg[PRELIGHT]     	=  shade (1.05, "#dbdbdb")
  fg[SELECTED]     	=  @selected_fg_color
  fg[INSENSITIVE]  	=  mix (0.08, @selected_bg_color, shade(0.51, "#dbdbdb"))

  bg_pixmap[NORMAL] = "/images/WindowBg.png"
  bg[NORMAL]       	=  "#2C2C2C" #mix (0.30, @selected_bg_color, "#262626")
  bg[ACTIVE]        =  shade (0.8, @base_color) # inactive tab color
  bg[PRELIGHT]      =  mix (0.4, @selected_bg_color, shade (1.1, @base_color))
  bg[SELECTED]      =  "#006AA8" #mix (0.30, @selected_bg_color, "#262626")
  bg[INSENSITIVE]  	=  "#2f2f2f"

  base[NORMAL]     	=  @base_color
  base[ACTIVE]     	=  shade(0.79, @selected_bg_color) # background color for inactive selected items
  base[PRELIGHT]   	=  @base_color
  base[SELECTED]    =  @selected_bg_color #mix (0.40, @selected_bg_color, "#262626")
  base[INSENSITIVE]	=  shade (1.05, @bg_color)

  text[NORMAL]     	=  "#dbdbdb"
  text[ACTIVE]      =  shade (1.1, "#dbdbdb") # text color for inactive selected items
  text[PRELIGHT]   	=  shade (1.05, "#dbdbdb")
  text[SELECTED]   	=  @selected_fg_color
  text[INSENSITIVE]	=  mix (0.08, @selected_bg_color, shade(0.51, "#dbdbdb"))

  engine "equinox" {
    curvature           = 2.5
    menubarstyle        = 0 # 0 = flat, 1 = gradient
    menubarborders      = 0 # 0 = none, 1 = bottom border, 2 = top half-border, 3 = bottom border and top half-border
    menubaritemstyle    = 3 # 0 = flat, 1 = gradient, 2 = inverse gradient, 3 = line, 99 = original
    toolbarstyle        = 0 # 0 = flat, 1 = gradient, 2 = flat without border, 3 = gradient without border, 4 = flat with bottom border, 5 = gradient with bottom border
    buttonstyle         = 0 # 0 = normal, 1 = glassy
    menuitemstyle       = 0 # 0 = normal, 1 = glassy
    listviewheaderstyle = 0 # 0 = normal, 1 = glassy
    listviewitemstyle   = 1 # 0 = flat, 1 = gradient
    scrollbarstyle      = 0 # 0 = normal, 1 = glassy, 2 = normal with handles, 3 = glassy with handles, 4 = flat
    scrollbartrough     = 1 # 0 = background color of the parent widget, 1 = base color of the widget itself
    scalesliderstyle    = 2 # 0 = normal, 1 = glassy, 2 = normal with bullet
    checkradiostyle     = 0 # 0 = normal, 1 = glassy
    progressbarstyle    = 0 # 0 = normal, 1 = glassy
    separatorstyle    	= 1 # 0 = solid inset, 1 = gradient inset, 2 = light gradient line, 3 = dark gradient line
    resizegripstyle    	= 0 # 0 = circle, 1 = corner
    textstyle           = 0
    textshade           = 1.025
    animation           = TRUE # FALSE = disabled, TRUE = enabled
  }
}

style "theme-black" {
  color["panel_bg"] = mix (0.60, "#0e0e0e", shade (0.8, @bg_color)) #shade(0.25, @bg_color)
  fg[NORMAL]        = shade (0.9, @selected_fg_color)
  fg[PRELIGHT]	  = shade (0.9, @selected_fg_color)
	fg[ACTIVE]		  = shade (0.9, @selected_fg_color)
	fg[SELECTED]	  = shade (0.9, @selected_fg_color)
	fg[INSENSITIVE]	  = shade (1.175, @panel_bg)
  bg[NORMAL]        = @panel_bg
  bg[ACTIVE]		  = shade (0.8, @panel_bg)
  bg[SELECTED]      = shade (1.5, @panel_bg)
  bg[PRELIGHT]      = shade (1.65, @panel_bg) 
  text[NORMAL]        = shade (0.9, @selected_fg_color)
}

style "test" = "theme-default" {
  fg[NORMAL]       	=  "#FFFFFF"
  fg[ACTIVE]       	=  "#FFFFFF"
  fg[PRELIGHT]     	=  "#FFFFFF"
  fg[SELECTED]     	=  "#FFFFFF"
  fg[INSENSITIVE]  	=  "#FFFFFF"

  bg[NORMAL]       	=  "#FF0000"
  bg[ACTIVE]          =  "#FF0000"
  bg[PRELIGHT]        =  "#FF0000"
  bg[SELECTED]        =  "#FF0000"
  bg[INSENSITIVE]  	=  "#FF0000"

  text[NORMAL]       	=  "#FFFFFF"
  text[ACTIVE]       	=  "#FFFFFF"
  text[PRELIGHT]     	=  "#FFFFFF"
  text[SELECTED]     	=  "#FFFFFF"
  text[INSENSITIVE]  	=  "#FFFFFF"

  base[NORMAL]       	=  "#FF0000"
  base[ACTIVE]          =  "#FF0000"
  base[PRELIGHT]        =  "#FF0000"
  base[SELECTED]        =  "#FF0000"
  base[INSENSITIVE]  	=  "#FF0000"
}

style "theme-wide" = "theme-default" {
  xthickness = 2
  ythickness = 2
}

style "theme-wider" = "theme-default" {
  xthickness = 3
  ythickness = 3
}

style "theme-widest" = "theme-default" {
  xthickness = 4
  ythickness = 3
}

style "theme-button" = "theme-wider" {
	GtkWidget	:: focus-line-width		=0 #1+ adds selected borders
  bg[NORMAL]   = "#1b1b1b"
  bg[ACTIVE]   = "#101010"
  bg[PRELIGHT] = "#161616"
}

style "theme-scrollbar" = "theme-default" {
    xthickness   = 0
    ythickness   = 0

  base[NORMAL]  		= shade(0.7, @base_color)
  bg[PRELIGHT]   	= @selected_bg_color #shade (1.4, mix (0.30, @selected_bg_color, "#262626"))
  bg[ACTIVE] 		= mix (0.3, "#dbdbdb", shade(0.9, @base_color))
  
  engine "equinox" {
    curvature = 8
	}
}

style "theme-entry" {
    xthickness   = 3
    ythickness   = 5
	GtkWidget	:: focus-line-width		=1 #1+ adds selected borders
	GtkEntry::inner-border 	= { 0,0, 0, 0}
	bg[NORMAL] = @base_color
	  base[NORMAL] 		= "#4c4c4c"
	  base[INSENSITIVE]	= "#2f2f2f"
	  text[NORMAL]     	= "#dbdbdb"
	  bg[PRELIGHT] 		= @base_color

}

style "theme-frame" = "theme-wider" {
  GtkWidget::draw-border = {3,3,3,3} #If I add pixmap like menubar it will display the WindowBg.png instead of the base[NORMAL] color for STATUSBAR...Im not sure if this would affect any other app favorably.
  	bg_pixmap[NORMAL] = "/images/WindowBg.png"

  engine "pixmap"
{

	image
	{
		function	= BOX
		recolorable	= TRUE
		state		= NORMAL
		file		= "/images/WindowBg.png"
		border		= { 0 ,0 , 0 ,0}
		stretch		= FALSE

	}
}
}

style "theme-handlebox" = "theme-default" {
  bg[NORMAL] = shade (0.95, @bg_color)

}

style "theme-scale" = "theme-default" {
  bg[NORMAL]     = shade (1.05, @base_color)
  bg[PRELIGHT]   = shade (1.10, mix(0.9, @base_color, @selected_bg_color))
  base[SELECTED] = @selected_bg_color
}

style "theme-range" = "theme-default" {
  bg[NORMAL]        = shade (1.0930, @base_color)
  bg[PRELIGHT]      = mix (0.93, shade (1.14, @base_color), @selected_bg_color)

  #Arrows
  text[NORMAL]      = shade (0.275,@selected_fg_color)
  text[PRELIGHT]    = @selected_fg_color
  text[ACTIVE]      = shade (0.10,@selected_fg_color)
  text[INSENSITIVE] = mix (0.80,shade (0.90,@bg_color),"#dbdbdb")
}

style "theme-notebook-bg" = "theme-default" {
	bg[NORMAL]   = shade(1.1, @base_color)
	bg[SELECTED] = "#434343"
}

style "theme-notebook" = "theme-notebook-bg" {
  xthickness = 2
  ythickness = 2
}

style "theme-notebook-scrollbar" = "theme-scrollbar" {
	base[NORMAL]   = shade (1.07, @base_color)
}

style "theme-menu" = "theme-default" {
  xthickness = 0
  ythickness = 0
  bg_pixmap[NORMAL] = ""
  bg[NORMAL] = 	"#282828"
  bg[ACTIVE] =  "#242424" #shade (1.2,@base_color)
}

style "theme-menuitem" = "theme-wider" {
  bg[SELECTED]   = @selected_bg_color
  fg[PRELIGHT]   =  @selected_fg_color
  text[PRELIGHT] =  @selected_fg_color
}

style "theme-menubar-item" = "theme-menuitem" {
  bg[SELECTED]   = @selected_bg_color

 
	fg[SELECTED]   = @selected_fg_color
	fg[ACTIVE]	   = "#dbdbdb"
	engine "equinox"{}
}

style "theme-toolbar" = "theme-default" {
  bg_pixmap[NORMAL] = "/images/WindowBg.png"
engine "pixmap"
{
	image
	{
		function	= BOX
		recolorable	= TRUE
		file		= "/images/WindowBg.png"
		border		= { 0 , 0 , 0 , 0 }
		stretch		= FALSE
	}
}
}

style "theme-tree" = "theme-default" {
  xthickness   = 3
  ythickness   = 1

  GtkWidget::focus-padding = 0

  bg[NORMAL]   = shade (0.92, @base_color)
  bg[PRELIGHT] = @selected_bg_color #shade (1.05, mix (0.30, @selected_bg_color, "#262626"))
  bg[ACTIVE]   = shade (1.02, @base_color)
engine "equinox" {
}

}

style "theme-tree-arrow" = "theme-default" {
  bg[NORMAL]   =  mix (0.70, shade (0.75, @bg_color), shade (0.80, @selected_bg_color))
  bg[PRELIGHT] =  mix (0.80, @bg_color, @selected_bg_color)
engine "equinox" {
}

}

style "theme-calendar" {
  xthickness     = 0
  ythickness     = 0
  bg[NORMAL]     = shade (0.92, @base_color)
  bg[PRELIGHT]   = shade (0.92, @base_color)
  bg[ACTIVE]     = shade (0.85, @base_color)
  text[PRELIGHT] = @selected_fg_color
}

style "theme-tooltips" = "theme-widest" {
  bg[NORMAL]   = @tooltip_bg_color
  bg[SELECTED] = @tooltip_bg_color
  fg[NORMAL]   = @tooltip_fg_color
  text[NORMAL] = shade (0.92, @tooltip_bg_color) # border color
}

#style "theme-progressbar" = "theme-default" {
#  xthickness   = 2
#  ythickness   = 2
#  font_name    = "Bold"
#  bg[NORMAL]   = "#1c2633"
#  fg[PRELIGHT] = shade(1.30, @selected_fg_color)
#}

style "theme-spin"  = "theme-button" {

    ythickness   = 5
	GtkWidget	:: focus-line-width		=0 #1+ adds selected borders
  GtkButton::inner-border = { 0, 1, 0, 0 }
	GtkWidget	:: focus-line-width		= 0 #1+ adds selected borders
	bg[NORMAL] = @base_color
	  base[NORMAL] 		= "#4c4c4c"
	  text[NORMAL]     	= "#dbdbdb"
	  bg[PRELIGHT] 		= @base_color	
      base[INSENSITIVE]  	=  "#2f2f2f"
engine "equinox" {
}
}

style "theme-combo"  = "theme-button" {
	GtkWidget	:: focus-line-width		= 0 #1+ adds selected borders
  GtkButton::inner-border = { 0, 1, 0, 0 }
	base[ACTIVE] 		= @base_color
	text[ACTIVE] 		= "#dbdbdb"
	base[PRELIGHT] 		= shade (1.20, mix(0.6, @bg_color, @selected_bg_color))
      bg[NORMAL] = @base_color
	  base[NORMAL] 		= "#4c4c4c"
	  base[INSENSITIVE]	= "#2f2f2f"
	  text[NORMAL]     	= "#dbdbdb"
	  bg[PRELIGHT] 		= @base_color
engine "equinox" {
}
}

style "theme-combo-box" = "theme-button" {
}

style "theme-arrow" = "theme-default" {
  text[NORMAL] = "#dbdbdb"
  text[PRELIGHT] = "#dbdbdb"
  text[ACTIVE] = "#dbdbdb"
  text[SELECTED] = "#dbdbdb"
}

style "theme-viewport" = "theme-default" {

	engine "pixmap" {
		#image {
		#	function	= SHADOW
		#}		
			image
	{
		function	= FLAT_BOX
		recolorable	= TRUE
		file		= "/images/V-Box.png"
		border		= { 6, 6 , 6 , 6 }
		stretch		= TRUE
	}
	}
}

style "theme-statusbar" = "theme-default" {
}

style "statusbar-frame-fix"	{
	engine "pixmap" {
		image 
		{
			function	= SHADOW
		}		
	}
}

style "theme-statusbar-label"  {
  fg[NORMAL] =  mix (0.40, "#1d1d1d", "#dbdbdb") #shade (0.94, "#a7aba7")
}

style "theme-check-radio-buttons" = "murrine-button" {
  GtkWidget::focus-padding = 1
  text[SELECTED]    = shade(1.06, @selected_bg_color)
  text[INSENSITIVE] = shade (0.625, @bg_color)
  base[PRELIGHT]    = mix (0.75, @base_color, @selected_bg_color)
  base[SELECTED]    = shade (0.5, @bg_color)
  base[ACTIVE]      = @base_color

engine "equinox" {
}

}

style "notebook-check-radio-buttons" = "notebook-button" {
  GtkWidget::focus-padding = 1
  text[SELECTED]    = shade(1.06, @selected_bg_color)
  text[INSENSITIVE] = shade (0.625, @bg_color)
  base[PRELIGHT]    = mix (0.75, @base_color, @selected_bg_color)
  base[SELECTED]    = shade (0.5, @bg_color)
  base[ACTIVE]      = @base_color

engine "equinox" {
}

}

# widget styles
class "GtkWidget"       style "theme-default"
class "GtkScale"        style "theme-scale"
class "GtkRange"        style "theme-range"
class "GtkFrame"        style "theme-frame"
class "GtkEntry"        style "theme-entry"
#class "GtkProgressBar"  style "murrine-progressbar"
class "GtkSeparator"    style "theme-wide"
class "GtkScrollbar"	  style "theme-scrollbar"
class "GtkCalendar"     style "theme-calendar"
class "GtkViewport"     style "theme-viewport"
class "GtkStatusbar"    style "theme-statusbar"
class "GtkArrow"        style "theme-arrow"

widget_class "*<GtkStatusbar>" 		style "theme-statusbar"
widget_class "*<GtkStatusbar>*<GtkLabel>" 		style "theme-statusbar-label"

#widget_class "*<GtkButton>"       style "theme-button"
widget_class "*<GtkCheckButton>"  style  "theme-check-radio-buttons"
widget_class "*<GtkCheckButton>*<GtkLabel>"  style:highest  "theme-default"
widget_class "*<GtkHandleBox>"    style "theme-handlebox"

# Toolbar
#class "*HandleBox"          style "theme-toolbar"
#class "GtkToolbar"  style "murrine-toolbar"
widget_class "*HandleBox"   style "theme-toolbar"

# tooltips stuff
widget "gtk-tooltip*"  						style "theme-tooltips"

# Notebook
#widget_class "*<GtkNotebook>*<GtkEventBox>"     style "theme-notebook-bg"
#widget_class "*<GtkNotebook>*<GtkDrawingArea>"  style "theme-notebook-bg"
#widget_class "*<GtkNotebook>*<GtkLayout>"       style "theme-notebook-bg"
#widget_class "*<GtkNotebook>"                   style "theme-notebook"

# combobox stuff
widget_class "*<GtkCombo>*"                 style "theme-combo"
widget_class "*<GtkComboBox>*<GtkButton>"   style "theme-combo-box"
widget_class "*<GtkComboBoxEntry>*"         style "theme-combo"
widget_class "*<GtkSpinButton>*"            style "theme-spin"

# treeview stuff

widget_class "*.GtkTreeView.GtkButton"   style:highest "theme-tree"
widget_class "*GtkCTree.GtkButton" 	    style:highest "theme-tree"
widget_class "*GtkList.GtkButton" 	    style:highest "theme-tree"
widget_class "*GtkCList.GtkButton" 	    style:highest "theme-tree"
widget_class "*.<GtkTreeView>.<GtkButton>*<GtkLabel>" style:highest "theme-default"
widget_class "*<GtkCTree>.<GtkButton>*<GtkLabel>" 	    style:highest "theme-tree"
widget_class "*<GtkList>.<GtkButton>*<GtkLabel>" 	    style:highest "theme-tree"
widget_class "*<GtkCList>.<GtkButton>*<GtkLabel>" 	    style:highest "theme-tree"

#For arrow bg
widget_class "*<GtkTreeView>.<GtkButton>*<GtkArrow>"    style "theme-tree-arrow"
widget_class "*<GtkCTree>.<GtkButton>*<GtkArrow>" 	    style "theme-tree-arrow"
widget_class "*<GtkList>.<GtkButton>*<GtkArrow>" 	    style "theme-tree-arrow"

# Menus
class "GtkMenu"                             style "theme-menu"
#class "GtkMenubar"                          style "theme-menubar"
widget_class "*<GtkMenuItem>*"              style "theme-menuitem"
widget_class "*<GtkMenuBar>.<GtkMenuItem>*" style:highest "theme-menubar-item"

widget_class "*<GtkStatusbar>.<GtkFrame>"    style "statusbar-frame-fix"
#######################################################
##  Panel
#######################################################

style "theme-panel" = "theme-black" {
  xthickness   = 1
  ythickness   = 1
  bg_pixmap[NORMAL] = "images/panel_bg.png"
}

style "theme-panel-button" = "theme-black" {
  xthickness        = 3
  ythickness        = 2
}

widget "*PanelWidget*"                    style "theme-panel"
#widget "*Panel*Frame*"                    style "theme-panel"
widget_class "*PanelApplet*<GtkButton>*"  style "theme-panel-button"
widget "*fast-user-switch-applet*"	style "theme-panel" # Workaround for Fast User Switch applet
class "PanelApp*" 						      style "theme-panel"
class "PanelToplevel*" 					    style "theme-panel"
widget_class "*Panel*<GtkMenuBar>*" style:highest "theme-panel" # The panel menubar
widget "*TomboyTray*"					      style "theme-panel" # Workaround for Tomboy
widget "*TomboyApplet*"					    style "theme-panel"
widget "*Net*Applet*"					      style "theme-panel"
widget "*CPU*Applet*"					      style "theme-panel"
widget "*dictApplet*"					      style "theme-panel"
#XFCE panel
widget_class "*notif*"					    style "theme-panel"
widget_class "*Notif*"					    style "theme-panel"
widget_class "*Tray*"					      style "theme-panel"
widget_class "*tray*"					      style "theme-panel"
widget "*Xfce*Panel*"					      style "theme-panel"
class "*Xfce*Panel*"					      style "theme-panel"


style "theme-button-panel" {
  xthickness   = 3
  ythickness   = 3
  bg[SELECTED] = shade(0.65, @bg_color)
}
widget_class "*Panel*<GtkButton>"     style:highest "theme-button-panel"

style "theme-menu-black" = "theme-black" {
  bg[SELECTED] = shade(1.6, @panel_bg)
  bg[INSENSITIVE] = shade(0.85, @panel_bg)
}

style "theme-menuitem-black" = "theme-black" {
  text[NORMAL]   = shade (0.8, @selected_fg_color)
  fg[NORMAL]     = shade (0.8, @selected_fg_color)
  fg[PRELIGHT]   = @selected_fg_color
  text[PRELIGHT] = @selected_fg_color
  bg[SELECTED]   = shade (1.8, @panel_bg)
  engine "equinox" {
    textstyle = 4
    textshade = 0.64
    separatorstyle = 2
  }
}

style "theme-menubar-black" = "theme-menu-black" {
  bg[SELECTED]   = shade (1.05, @panel_bg)
  engine "equinox" {
    menubarborders = 0
    menubaritemstyle = 2
    curvature = 0
  }
}

style "theme-menubar-item-black" = "theme-menuitem-black" {
  bg[SELECTED] = shade (0.78, @panel_bg)
}

widget "*Panel*MenuBar*"                            style:highest "theme-menubar-black"
widget "GtkWindow.gnome-panel-main-menu*"           style:highest "theme-menu-black"
widget "GtkWindow.gnome-panel-main-menu*MenuItem"   style:highest "theme-menuitem-black"

widget "GtkWindow*menu*GtkMenu*"		          style "theme-menu-black"
widget "GtkWindow*menu*GtkMenu*MenuItem*"		  style "theme-menuitem-black"
widget "*user*menubar*"		                    style:highest "theme-menubar-black"

widget "*combo*menu*"				    style:highest "theme-menu"
widget "*combo*menu*MenuItem*"  style:highest "theme-menuitem"

widget "*.gtk-combobox-popup-menu.*" style:highest "theme-menu"
#######################################################
##  GNOME specific
#######################################################

widget "ido-offscreen-scale" style "theme-menu" # Sound panel appel
widget "*IdoEntryMenuItem*" style "theme-wide"

widget_class "*.ETree.ECanvas"      style "theme-tree" #evolution
widget_class "*.ETable.ECanvas" 	style "theme-tree" #evolution

#nautilus search stripe and other specialties
style "extra-view" {
	bg[NORMAL] = shade (0.6, @bg_color)
	fg[NORMAL] = @selected_fg_color
}

style "evolution-new-button-workaround" {
  bg[NORMAL] = @bg_color
	engine "equinox" {
		toolbarstyle = 0
	}
}
widget_class "EShellWindow.GtkVBox.BonoboDock.BonoboDockBand.BonoboDockItem*" style "evolution-new-button-workaround"


#include "notebook.rc"
include "pixmap.rc"
include "murrine.rc"
#include "apps/nautilus.rc"
#include "apps/nautilus-elementary.rc"
#include "apps/gnome-system-monitor.rc"
#include "apps/gnome-terminal.rc"
#include "apps/google-chrome.rc"
#include "apps/gedit.rc"
#include "apps/ubuntuone.rc"
include "apps/globalmenu.rc"
include "apps/firefox.rc"
include "button.rc"
include "notebook.rc"
